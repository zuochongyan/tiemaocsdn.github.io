{"name":"Zuochongyan.GitHub.io","tagline":"左崇彦的博客","body":"# 1.Analysis of citation graphs(引用图分析)\r\n\r\n标签（空格分隔）： python 算法 公开课\r\n------\r\n\r\n# 1.Degree distributions for graphs #\r\n在进行引用图分析之前先定义一些简单的概念和函数：\r\n***有向图中的某些定义：***\r\n出度(out degree)：有向图中某个点的出度k表示有k条边以该点为起点，\r\n入度(in degree);:有向图中某个点的入度k表示有k个顶点以此顶点作为终点\r\n```python\r\n\"\"\"\r\n计算一个有向图的in degree情况，返回一个dict，如{a:b}表示a为某篇文章，b为该文章被引用的次数。\r\n\"\"\"\r\ndef compute_in_degrees(digraph):\r\n    result ={k:0 for k in digraph}\r\n    for k in digraph.keys():\r\n        for val in digraph[k]:\r\n                result[val]=result[val]+1\r\n    return result\r\n```\r\n```python\r\n\"\"\"\r\n计算一个有向图的分布，返回一个dict，返回一个dict，如{a:b}表示a为in degree,b为in degree等于a的节点个数。\r\n\"\"\"\r\ndef in_degree_distribution(digraph):\r\n \r\n    in_degree = compute_in_degrees(digraph)\r\n    result ={in_degree[k]:0 for k in in_degree}\r\n    for k in in_degree.keys():\r\n        result[in_degree[k]]=result[in_degree[k]]+1\r\n    return result\r\n```\r\n有了上面两个函数之后我们就能对citation graphs进行简单的分析了。\r\n本文中我们分析科学文章之间是如何引用的。文章之间的引用可以看成一个有向图。课程中已经提供了一个完整的图，python中通常将图用一个dict(字典)来表示，{a:[b,c]}表示文章a引用了文章b和文章c。给定数据中总共有27770篇高能物理理论方面的文章，这个图共有352768个边，也就是每篇文章平均引用了12.7篇左右的文献。\r\n# 1.数据读取与in degree的分布图分析#\r\n首先我们将提供的数据读入Python,保存在一个dict中。\r\n```python\r\ndef load_graph(filename):\r\n    \"\"\"\r\n    读取文件并保存成dict格式\r\n    \"\"\"\r\n    graph_file = open(filename,\"r\")\r\n    graph_text = graph_file.read()\r\n    graph_lines = graph_text.split('\\n')\r\n    graph_lines = graph_lines[ : -1]        #去除最后一行\r\n    \r\n    answer_graph = {}\r\n    for line in graph_lines:\r\n        neighbors = line.split(' ')     #分成tuple,字符串\r\n        node = int(neighbors[0])        #读入的数据是字符串，转换成整数\r\n        answer_graph[node] = set([])\r\n        for neighbor in neighbors[1 : -1]:  #不包括第一个和最后一个\r\n            answer_graph[node].add(int(neighbor))\r\n\r\n    return answer_graph\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}